{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"description": "aws providers",
	"type": "object",
	"properties": {
		"name": { "type": "string", "enum": ["aws", "google"] },
		"runtime": {
			"$ref": "./runtime.json"
		},
		"stage": {
			"type": "string",
			"description": "Set the default stage used. Default is dev",
			"default": "dev",
			"examples": ["${opt:stage, 'dev'}"]
		},
		"region": {
			"type": "string",
			"description": "Overwrite the default region used. Default is us-east-1",
			"default": "us-east-1",
			"examples": ["${opt:region, 'us-east-1'}"]
		},
		"stackName": {
			"type": "string",
			"description": "Use a custom name for the CloudFormation stack"
		},
		"apiName": {
			"type": "string",
			"description": "Use a custom name for the API Gateway API"
		},
		"websocketsApiName": {
			"type": "string",
			"description": "Use a custom name for the websockets API"
		},
		"websocketsApiRouteSelectionExpression": {
			"type": "string",
			"description": "# custom route selection expression"
		},
		"profile": {
			"type": "string",
			"description": "The default profile to use with this service"
		},
		"memorySize": {
			"type": "number",
			"default": 1024,
			"description": "Overwrite the default memory size. Default is 1024"
		},
		"reservedConcurrency": {
			"type": "number",
			"description": "Overwrite the default reserved concurrency limit. By default, AWS uses account concurrency limit"
		},
		"timeout": {
			"type": "number",
			"default": "6",
			"maximum": 30,
			"description": "The default is 6 seconds. Note: API Gateway current maximum is 30 seconds"
		},
		"logRetentionInDays": {
			"type": "number",
			"description": "Set the default RetentionInDays for a CloudWatch LogGroup"
		},
		"deploymentBucket": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Deployment bucket name. Default is generated by the framework"
				},
				"maxPreviousDeploymentArtifacts": {
					"type": "number",
					"default": 5,
					"description": "On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5"
				},
				"blockPublicAccess": {
					"type": "boolean",
					"default": false,
					"description": "Prevents public access via ACLs or bucket policies. Default is false"
				},
				"serverSideEncryption": {
					"type": "string",
					"description": "server-side encryption method",
					"examples": ["AES256"]
				},
				"sseKMSKeyId": {
					"type": "string",
					"description": "when using server-side encryption"
				},
				"sseCustomerAlgorithim": {
					"type": "string",
					"description": "when using server-side encryption and custom keys",
					"examples": ["AES256"]
				},
				"sseCustomerKey": {
					"type": "string",
					"description": "when using server-side encryption and custom keys"
				},
				"sseCustomerKeyMD5": {
					"type": "string",
					"description": "when using server-side encryption and custom keys"
				},
				"tags": {
					"type": "object",
					"description": "Tags that will be added to each of the deployment resources",
					"properties": {}
				}
			}
		},
		"iamManagedPolicies": {
			"type": "array",
			"items": { "type": "string" }
		},
		"iamRoleStatements": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"Effect": {
						"anyOf": [
							{ "type": "string" },
							{ "type": "string", "enum": ["Allow", "Deny"] }
						]
					},
					"Action": {
						"$ref": "./iam/actions.json"
					},
					"Resource": {
						"type": "object",
						"properties": {
							"Fn::Join": {
								"type": "array",
								"items": {
									"oneOf": [
										{ "type": "string" },
										{
											"type": "object",
											"properties": {
												"Ref": { "type": "string" }
											}
										}
									]
								}
							}
						}
					}
				}
			}
		},
		"deploymentPrefix": {
			"type": "string",
			"default": "serverless",
			"description": "The S3 prefix under which deployed artifacts should be stored. Default is serverless"
		},
		"role": {
			"type": "string",
			"description": "Overwrite the default IAM role which is used for all functions"
		},
		"rolePermissionsBoundary": {
			"type": "string",
			"description": "ARN of an Permissions Boundary for the role."
		},
		"cfnRole": {
			"type": "string",
			"description": "ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials"
		},
		"versionFunctions": {
			"type": "boolean",
			"description": "Optional function versioning"
		},
		"environment": {
			"type": "object",
			"properties": {},
			"description": "Service wide environment variables. https://www.serverless.com/framework/docs/providers/aws/guide/variables/"
		},
		"endpointType": {
			"type": "string",
			"default": "edge",
			"examples": ["edge", "regional"],
			"description": "Optional endpoint configuration for API Gateway REST API. Default is Edge"
		},
		"apiKeys": {
			"type": "array",
			"description": "List of API keys to be used by your service API Gateway REST API",
			"items": {
				"anyOf": [
					{
						"type": "string",
						"examples": ["${env:MY_API_KEY}", "${opt:stage}-myFirstKey"]
					},
					{
						"type": "object",
						"patternProperties": {
							"^.*$": {
								"type": "object",
								"properties": {
									"value": { "type": "string" },
									"description": { "type": "string" },
									"customerId": { "type": "string" }
								}
							}
						}
					}
				]
			}
		},
		"apiGateway": {
			"type": "object",
			"required": ["restApiResources"],
			"description": "Optional API Gateway global config",
			"properties": {
				"restApiId": {
					"type": "string",
					"description": "REST API resource ID. Default is generated by the framework"
				},
				"restApiRootResourceId": {
					"type": "string",
					"description": "Root resource ID, represent as / path"
				},
				"restApiResources": {
					"type": "array",
					"description": "List of existing resources that were created in the REST API. This is required or the stack will be conflicted",
					"items": { "type": "string" }
				},
				"websocketApiId": {
					"type": "string",
					"description": "Websocket API resource ID. Default is generated by the framework"
				},
				"apiKeySourceType": {
					"type": "string",
					"enum": ["HEADER", "AUTHORIZER"],
					"description": "Source of API key for usage plan. HEADER or AUTHORIZER."
				},
				"minimumCompressionSize": {
					"type": "number",
					"description": "Compress response when larger than specified size in bytes (must be between 0 and 10485760)",
					"minimum": 0,
					"maxItems": 10485760
				},
				"description": {
					"type": "string",
					"description": "Optional description for the API Gateway stage deployment"
				},
				"binaryMediaTypes": {
					"type": "array",
					"description": "Optional binary media types the API might return",
					"items": { "type": "string" }
				},
				"metrics": {
					"type": "boolean",
					"description": "Optional detailed Cloud Watch Metrics"
				}
			}
		},
		"alb": {
			"type": "object",
			"properties": {
				"targetGroupPrefix": {
					"type": "string",
					"description": "Optional prefix to prepend when generating names for target groups"
				},
				"authorizers": {
					"type": "object",
					"patternProperties": {
						"^.*$": {
							"type": "object",
							"properties": {
								"type": { "type": "string" },
								"userPoolArn": { "type": "string" },
								"userPoolClientId": { "type": "string" },
								"userPoolDomain": { "type": "string" },
								"onUnauthenticatedRequest": {
									"type": "string",
									"enum": ["allow", "deny", "authenticate"],
									"description": "If set to 'allow' this allows the request to be forwarded to the target when user is not authenticated. When omitted it defaults 'deny' which makes a HTTP 401 Unauthorized error be returned. Alternatively configure to 'authenticate' to redirect request to IdP authorization endpoint"
								},
								"requestExtraParams": {
									"type": "object",
									"description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint",
									"properties": {
										"prompt": { "type": "string" },
										"redirect": { "type": "boolean" }
									}
								},
								"scope": {
									"type": "string",
									"default": "openid",
									"description": "Can be a combination of any system-reserved scopes or custom scopes associated with the client. The default is openid"
								},
								"sessionCookieName": {
									"type": "string",
									"description": "The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie",
									"default": "AWSELBAuthSessionCookie"
								},
								"sessionTimeout": {
									"type": "number",
									"description": "The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).",
									"default": 604800
								},
								"authorizationEndpoint": {
									"type": "string",
									"description": "The authorization endpoint of the IdP. Must be a full URL, including the HTTPS protocol, the domain, and the path"
								},
								"clientId": { "type": "string" },
								"clientSecret": {
									"type": "string",
									"description": "if creating a rule this is required. If modifying a rule, this can be omitted if you set useExistingClientSecret to true"
								},
								"useExistingClientSecret": {
									"type": "boolean",
									"description": "only required if clientSecret is omitted"
								},
								"issuer": {
									"type": "string",
									"description": "The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path"
								},
								"tokenEndpoint": { "type": "string" },
								"userInfoEndpoint": { "type": "string" }
							}
						}
					}
				}
			}
		},
		"httpApi": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "If we want to attach to externally created HTTP API its id should be provided here"
				},
				"name": {
					"type": "string",
					"description": "Use custom name for the API Gateway API, default is ${opt:stage, self:provider.stage, 'dev'}-${self:service}"
				},
				"payload": {
					"type": "string",
					"enum": ["1.0", "2.0"],
					"description": "Specify payload format version for Lambda integration ('1.0' or '2.0'), default is '1.0'"
				},
				"cors": {
					"type": "boolean",
					"description": "Implies default behavior, can be fine tuned with specficic options"
				},
				"authorizers": {
					"description": "JWT authorizers to back HTTP API endpoints",
					"type": "object",
					"patternProperties": {
						"^.*$": {
							"type": "object",
							"properties": {
								"identitySource": { "type": "string" },
								"issuerUrl": { "type": "string" },
								"audience": {
									"type": "array",
									"items": { "type": "string" }
								}
							}
						}
					}
				}
			}
		},
		"usagePlan": {
			"description": "Optional usage plan configuration",
			"type": "object",
			"properties": {
				"quota": {
					"type": "object",
					"properties": {
						"limit": { "type": "number" },
						"offset": { "type": "number" },
						"period": { "type": "string" }
					}
				},
				"throttle": {
					"type": "object",
					"properties": {
						"burstLimit": { "type": "number" },
						"rateLimit": { "type": "number" }
					}
				},
				"stackTags": {
					"type": "object",
					"properties": {},
					"description": "Optional CF stack tags"
				},
				"iamManagedPolicies": {
					"type": "array",
					"description": "Optional IAM Managed Policies, which allows to include the policies into IAM Role",
					"items": { "type": "string" }
				},
				"iamRoleStatements": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"Effect": {
								"anyOf": [
									{ "type": "string" },
									{ "type": "string", "enum": ["Allow", "Deny"] }
								]
							},
							"Action": {
								"$ref": "./iam/actions.json"
							},
							"Resource": {
								"type": "object",
								"properties": {
									"Fn::Join": {
										"type": "array",
										"items": {
											"oneOf": [
												{ "type": "string" },
												{
													"type": "object",
													"properties": {
														"Ref": { "type": "string" }
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"stackPolicy": {
					"type": "array",
					"description": "Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)",
					"items": {
						"type": "object",
						"properties": {
							"Effect": { "type": "string" },
							"Principal": { "type": "string" },
							"Resource": { "type": "string" },
							"Action": {
								"oneOf": [
									{ "type": "string" },
									{ "type": "array", "items": {} }
								]
							},
							"Condition": {
								"type": "object",
								"properties": {}
							}
						}
					}
				}
			}
		},
		"vpc": {
			"type": "object",
			"description": "Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required",
			"properties": {
				"securityGroupIds": {
					"type": "array",
					"items": { "type": "string" }
				},
				"subnetIds": {
					"type": "array",
					"items": { "type": "string" }
				}
			}
		},
		"notificationArns": {
			"type": "array",
			"description": "List of existing Amazon SNS topics in the same region where notifications about stack events are sent.",
			"items": { "type": "string" }
		},
		"stackParameters": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"ParameterKey": { "type": "string" },
					"ParameterValue": { "type": "string" }
				}
			}
		},
		"resourcePolicy": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"Effect": { "type": "string" },
					"Principal": { "type": "string" },
					"Action": { "type": "string" },
					"Resource": {
						"type": "array",
						"items": { "type": "string" }
					},
					"Condition": { "type": "object", "properties": {} }
				}
			}
		},
		"tags": {
			"type": "object",
			"properties": {},
			"description": "Optional service wide function tags"
		},
		"tracing": {
			"type": "object",
			"properties": {
				"apiGateway": { "type": "boolean" },
				"lambda": {
					"type": "boolean",
					"description": "Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'"
				}
			}
		},
		"logs": {
			"type": "object",
			"properties": {
				"restApi": {
					"type": "object",
					"description": "Optional configuration which specifies if API Gateway logs are used. This can either be set to `true` to use defaults, or configured via subproperties.",
					"properties": {
						"accessLogging": {
							"type": "boolean",
							"default": true,
							"description": "Optional configuration which enables or disables access logging. Defaults to true."
						},
						"executionLogging": {
							"type": "boolean",
							"default": true,
							"description": "Optional configuration which enables or disables execution logging. Defaults to true"
						},
						"fullExecutionData": {
							"type": "boolean",
							"default": true,
							"description": "Optional configuration which specifies whether or not to log full requests/responses for execution logging. Defaults to true."
						},
						"roleManagedExternally": {
							"type": "boolean",
							"default": false,
							"description": "Specifies whether the ApiGateway CloudWatch Logs role setting is not managed by Serverless. Defaults to false"
						},
						"format": {
							"type": "string",
							"description": "Optional configuration which specifies the log format to use for access logging."
						},
						"level": {
							"type": "string",
							"enum": ["INFO", "ERROR"],
							"description": "Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR"
						},
						"role": {
							"type": "string",
							"description": "Existing IAM role for ApiGateway to use when managing CloudWatch Logs. If 'role' is not configured, a new role is automatically created."
						}
					}
				},
				"websocket": {
					"type": "object",
					"description": "Optional configuration which specifies if Websocket logs are used. This can either be set to `true` to use defaults, or configured via subproperties.",
					"properties": {
						"level": {
							"type": "string",
							"enum": ["INFO", "ERROR"],
							"description": "Optional configuration which specifies the log level to use for execution logging. May be set to either INFO or ERROR."
						}
					}
				},
				"httpApi": {
					"type": "object",
					"description": "Optional configuration which specifies if HTTP API logs are used. This can either be set to `true` (to use defaults as below) or specific log format configuration can be provided",
					"properties": { "format": { "type": "string" } }
				},
				"frameworkLambda": {
					"type": "boolean",
					"description": "Optional, whether to write CloudWatch logs for custom resource lambdas as added by the framework"
				}
			}
		}
	}
}
